import {getRabbitChannel} from "./connection.js";
import {handlerAnswerFromWorker} from "../controller.js";

export const listenToQueues = async () => {
    const channel = getRabbitChannel();

    const ANSWER_QUEUE = 'answer_q';
    const STATUS_QUEUE = 'status_q';

    await channel.assertQueue(ANSWER_QUEUE, { durable: true });
    await channel.assertQueue(STATUS_QUEUE, { durable: true });

    await channel.prefetch(1);
    console.log("üéß –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤:", ANSWER_QUEUE);

    channel.consume(ANSWER_QUEUE, async (msg) => {
        if (msg !== null) {
            const {answer} = JSON.parse(msg.content.toString());
            try {
                // setTimeout(async () => {
                    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞:", answer.idPartTask, answer.status, answer.found);
                    await handlerAnswerFromWorker(answer);// –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É
                    channel.ack(msg) // –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                // }, 5000);
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏, –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–Ω–æ–≤–∞");
                channel.nack(msg);
            }
        }
    });

    channel.consume(STATUS_QUEUE, async (msg) => {
        if (msg !== null) {
            const answer = JSON.parse(msg.content.toString());
            try {
                setTimeout(() => {
                    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ –∑–∞–¥–∞—á–µ –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞:", answer);
                    channel.ack(msg)
                }, 5000);
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞, –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–Ω–æ–≤–∞");
                channel.nack(msg);
            }
        }
    });
};
