import PartTask from '../models/PartTask.js';
import { getRabbitChannel } from './connection.js';

export const resendUnsentPartTasks = async () => {
    const queue = process.env.TASK_QUEUE;
    const channel = getRabbitChannel();

    try {
        await channel.assertQueue(queue, { durable: true });

        const unsentParts = await PartTask.find({ status: 'CREATE' });

        if (unsentParts.length === 0) {
            console.log("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º CREATE –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏");
            return;
        }

        console.log(`üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ${unsentParts.length} –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å...`);

        for (const partTask of unsentParts) {
            const data = {
                idPartTask: partTask._id,
                alphabet: partTask.alphabet,
                partNumber: partTask.partNumber,
                partCount: partTask.partCount,
                hash: partTask.hash,
                maxLength: partTask.maxLength,
            };
            const payload = Buffer.from(JSON.stringify({ data }));

            try {
                channel.sendToQueue(queue, payload, { persistent: true });
                console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ${queue}:`, partTask._id);
                partTask.status = 'SENT';
                await partTask.save();
            } catch (sendErr) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${partTask._id} –ø–æ–≤—Ç–æ—Ä–Ω–æ: ${sendErr.message}`);
            }
        }
    } catch (err) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á:", err.message);
    }
};
