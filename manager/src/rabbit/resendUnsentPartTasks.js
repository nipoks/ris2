import PartTask from '../models/partTask.js';
import Task from '../models/task.js';
import { getRabbitChannel } from './connection.js';

export const resendUnsentPartTasks = async () => {
    const queue = process.env.TASK_QUEUE;
    const channel = getRabbitChannel();

    try {
        await channel.assertQueue(queue, { durable: true });

        const unsentParts = await PartTask.find({ status: 'CREATE' });

        if (unsentParts.length === 0) {
            console.log("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º CREATE –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏");
            return;
        }

        console.log(`üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ${unsentParts.length} –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å...`);
        const tasksMap = new Map();

        for (const partTask of unsentParts) {
            const idTask = partTask.idTask.toString();

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
            try {
                const data = {
                    idPartTask: partTask._id,
                    alphabet: partTask.alphabet,
                    partNumber: partTask.partNumber,
                    partCount: partTask.partCount,
                    hash: partTask.hash,
                    maxLength: partTask.maxLength,
                };
                const payload = Buffer.from(JSON.stringify({ data }));

                channel.sendToQueue(queue, payload, { persistent: true });
                console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:`, partTask._id);

                partTask.status = 'SENT';
                await partTask.save();

                if (!tasksMap.has(idTask)) tasksMap.set(idTask, []);
                tasksMap.get(idTask).push(partTask);

            } catch (sendErr) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${partTask._id}: ${sendErr.message}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞–∂–¥–æ–π Task, –≤—Å–µ –ª–∏ –µ—ë PartTask –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        for (const [idTask, sentParts] of tasksMap.entries()) {
            const totalParts = await PartTask.countDocuments({ idTask });
            const sentCount = await PartTask.countDocuments({ idTask, status: 'SENT' });

            if (totalParts === sentCount) {
                await Task.updateOne({ idTask }, { status: 'SENT' });
                console.log(`üîÑ –°—Ç–∞—Ç—É—Å Task ${idTask} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ SENT`);
            } else {
                console.log(`‚è≥ Task ${idTask} –ø–æ–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (${sentCount}/${totalParts})`);
            }
        }
    } catch (err) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á:", err.message);
        setTimeout(resendUnsentPartTasks, 5000);
    }
};
